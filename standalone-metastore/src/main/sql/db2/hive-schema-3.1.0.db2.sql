-- ----------------------------------------------------------------
-- DataNucleus SchemaTool (ran at 16/09/2019 13:32:04)
-- ----------------------------------------------------------------
-- Schema diff for jdbc:db2://tsql-lsql-mn.fyre.ibm.com:32051/bigsql and the following classes:-
--     org.apache.hadoop.hive.metastore.model.MCatalog
--     org.apache.hadoop.hive.metastore.model.MColumnDescriptor
--     org.apache.hadoop.hive.metastore.model.MConstraint
--     org.apache.hadoop.hive.metastore.model.MCreationMetadata
--     org.apache.hadoop.hive.metastore.model.MDBPrivilege
--     org.apache.hadoop.hive.metastore.model.MDatabase
--     org.apache.hadoop.hive.metastore.model.MDelegationToken
--     org.apache.hadoop.hive.metastore.model.MFieldSchema
--     org.apache.hadoop.hive.metastore.model.MFunction
--     org.apache.hadoop.hive.metastore.model.MGlobalPrivilege
--     org.apache.hadoop.hive.metastore.model.MISchema
--     org.apache.hadoop.hive.metastore.model.MIndex
--     org.apache.hadoop.hive.metastore.model.MMasterKey
--     org.apache.hadoop.hive.metastore.model.MMetastoreDBProperties
--     org.apache.hadoop.hive.metastore.model.MNotificationLog
--     org.apache.hadoop.hive.metastore.model.MNotificationNextId
--     org.apache.hadoop.hive.metastore.model.MOrder
--     org.apache.hadoop.hive.metastore.model.MPartition
--     org.apache.hadoop.hive.metastore.model.MPartitionColumnPrivilege
--     org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics
--     org.apache.hadoop.hive.metastore.model.MPartitionEvent
--     org.apache.hadoop.hive.metastore.model.MPartitionPrivilege
--     org.apache.hadoop.hive.metastore.model.MResourceUri
--     org.apache.hadoop.hive.metastore.model.MRole
--     org.apache.hadoop.hive.metastore.model.MRoleMap
--     org.apache.hadoop.hive.metastore.model.MRuntimeStat
--     org.apache.hadoop.hive.metastore.model.MSchemaVersion
--     org.apache.hadoop.hive.metastore.model.MSerDeInfo
--     org.apache.hadoop.hive.metastore.model.MStorageDescriptor
--     org.apache.hadoop.hive.metastore.model.MStringList
--     org.apache.hadoop.hive.metastore.model.MTable
--     org.apache.hadoop.hive.metastore.model.MTableColumnPrivilege
--     org.apache.hadoop.hive.metastore.model.MTableColumnStatistics
--     org.apache.hadoop.hive.metastore.model.MTablePrivilege
--     org.apache.hadoop.hive.metastore.model.MType
--     org.apache.hadoop.hive.metastore.model.MVersionTable
--     org.apache.hadoop.hive.metastore.model.MWMMapping
--     org.apache.hadoop.hive.metastore.model.MWMPool
--     org.apache.hadoop.hive.metastore.model.MWMResourcePlan
--     org.apache.hadoop.hive.metastore.model.MWMTrigger
--

-- NOTE: MANUAL MODIFICATION: Remove `generated always as identity (start with 1)` Clauses

-- NOTE: MANUAL ADDITION: BEGIN: Tablespace for Large Indices
-- ---------------------------------------------------------------------------
-- The following indices require a larger tablespace for the Db2 Docker Image:
-- 1) TAB_COL_STATS.TAB_COL_STATS_IDX
-- 2) PART_COL_STATS.PCS_STATS_IDX
-- 3) PART_COL_PRIVS.PARTITIONCOLUMNPRIVILEGEINDEX
-- 4) TBL_COL_PRIVS.TABLECOLUMNPRIVILEGEINDEX
-- 5) WM_POOL.UNIQUEWMPOOL
-- 6) COMPLETED_TXN_COMPONENTS.COMPLETED_TXN_COMPONENTS_INDEX
-- 7) TXN_WRITE_NOTIFICATION_LOG.TXN_WRITE_NOTIFICATION_LOG_IDX
-- ---------------------------------------------------------------------------
--CREATE BUFFERPOOL BP32K IMMEDIATE SIZE 250 AUTOMATIC PAGESIZE 32K;
--CREATE LARGE TABLESPACE TS32K PAGESIZE 32K MANAGED BY AUTOMATIC STORAGE BUFFERPOOL BP32K;
-- NOTE: MANUAL ADDITION: END: Tablespace for Large Indices

-- NOTE: MANUAL ADDITION: BEGIN: Internal DataNucleus Tables
CREATE TABLE SEQUENCE_TABLE(SEQUENCE_NAME VARCHAR(255) NOT NULL, NEXT_VAL DECIMAL NOT NULL);
ALTER TABLE SEQUENCE_TABLE ADD CONSTRAINT PART_TABLE_PK PRIMARY KEY (SEQUENCE_NAME);

CREATE TABLE NUCLEUS_TABLES(CLASS_NAME VARCHAR(128) NOT NULL, TABLE_NAME VARCHAR(128) NOT NULL, TYPE VARCHAR(4) NOT NULL, OWNER VARCHAR(2) NOT NULL, VERSION VARCHAR(20) NOT NULL, INTERFACE_NAME VARCHAR(255));
ALTER TABLE NUCLEUS_TABLES ADD CONSTRAINT NUCLEUS_TABLES_PK PRIMARY KEY (CLASS_NAME);
-- NOTE: MANUAL ADDITION: END: Internal DataNucleus Tables

-- NOTE: MANUAL ADDITION: BEGIN: Conflict with "SYSCAT"."ROLES"
-- Table ROLES for classes [org.apache.hadoop.hive.metastore.model.MRole]
CREATE TABLE ROLES(ROLE_ID BIGINT NOT NULL,CREATE_TIME DECIMAL(10, 0) NOT NULL,OWNER_NAME VARCHAR(128),ROLE_NAME VARCHAR(128));

ALTER TABLE ROLES ADD CONSTRAINT ROLES_PK PRIMARY KEY (ROLE_ID);
-- NOTE: MANUAL ADDITION: END: Conflict with "SYSCAT"."ROLES"

-- Table DB_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MDBPrivilege]
CREATE TABLE DB_PRIVS(DB_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),CREATE_TIME INTEGER NOT NULL,DB_ID BIGINT,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),DB_PRIV VARCHAR(128));

ALTER TABLE DB_PRIVS ADD CONSTRAINT DB_PRIVS_PK PRIMARY KEY (DB_GRANT_ID);

-- Table ROLE_MAP for classes [org.apache.hadoop.hive.metastore.model.MRoleMap]
CREATE TABLE ROLE_MAP(ROLE_GRANT_ID BIGINT NOT NULL,ADD_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),ROLE_ID BIGINT);

ALTER TABLE ROLE_MAP ADD CONSTRAINT ROLE_MAP_PK PRIMARY KEY (ROLE_GRANT_ID);

-- Table I_SCHEMA for classes [org.apache.hadoop.hive.metastore.model.MISchema]
CREATE TABLE I_SCHEMA(SCHEMA_ID BIGINT NOT NULL,CAN_EVOLVE CHAR(1) NOT NULL CHECK (CAN_EVOLVE IN ('Y','N')),COMPATIBILITY INTEGER NOT NULL,DB_ID BIGINT,DESCRIPTION VARCHAR(4000),"NAME" VARCHAR(256) NOT NULL,SCHEMA_GROUP VARCHAR(256),SCHEMA_TYPE INTEGER NOT NULL,VALIDATION_LEVEL INTEGER NOT NULL);

ALTER TABLE I_SCHEMA ADD CONSTRAINT I_SCHEMA_PK PRIMARY KEY (SCHEMA_ID);

-- Table TYPES for classes [org.apache.hadoop.hive.metastore.model.MType]
CREATE TABLE TYPES(TYPES_ID BIGINT NOT NULL,TYPE_NAME VARCHAR(128),TYPE1 VARCHAR(767),TYPE2 VARCHAR(767));

ALTER TABLE TYPES ADD CONSTRAINT TYPES_PK PRIMARY KEY (TYPES_ID);

-- Table PARTITIONS for classes [org.apache.hadoop.hive.metastore.model.MPartition]
CREATE TABLE PARTITIONS(PART_ID BIGINT NOT NULL,CREATE_TIME INTEGER NOT NULL,LAST_ACCESS_TIME INTEGER NOT NULL,PART_NAME VARCHAR(767),SD_ID BIGINT,TBL_ID BIGINT,WRITE_ID BIGINT NOT NULL);

ALTER TABLE PARTITIONS ADD CONSTRAINT PARTITIONS_PK PRIMARY KEY (PART_ID);

-- Table CTLGS for classes [org.apache.hadoop.hive.metastore.model.MCatalog]
CREATE TABLE CTLGS(CTLG_ID BIGINT NOT NULL,"DESC" VARCHAR(4000),LOCATION_URI VARCHAR(4000) NOT NULL,"NAME" VARCHAR(256));

ALTER TABLE CTLGS ADD CONSTRAINT CTLGS_PK PRIMARY KEY (CTLG_ID);

-- Table SKEWED_STRING_LIST for classes [org.apache.hadoop.hive.metastore.model.MStringList]
CREATE TABLE SKEWED_STRING_LIST(STRING_LIST_ID BIGINT NOT NULL);

ALTER TABLE SKEWED_STRING_LIST ADD CONSTRAINT SKEWED_STRING_LIST_PK PRIMARY KEY (STRING_LIST_ID);

-- Table DBS for classes [org.apache.hadoop.hive.metastore.model.MDatabase]
CREATE TABLE DBS(DB_ID BIGINT NOT NULL,CTLG_NAME VARCHAR(256),"DESC" VARCHAR(4000),DB_LOCATION_URI VARCHAR(4000) NOT NULL,"NAME" VARCHAR(128),OWNER_NAME VARCHAR(128),OWNER_TYPE VARCHAR(10));

ALTER TABLE DBS ADD CONSTRAINT DBS_PK PRIMARY KEY (DB_ID);

-- Table METASTORE_DB_PROPERTIES for classes [org.apache.hadoop.hive.metastore.model.MMetastoreDBProperties]
CREATE TABLE METASTORE_DB_PROPERTIES(PROPERTY_KEY VARCHAR(255) NOT NULL,DESCRIPTION VARCHAR(1000) NOT NULL,PROPERTY_VALUE VARCHAR(1000) NOT NULL);

ALTER TABLE METASTORE_DB_PROPERTIES ADD CONSTRAINT METASTORE_DB_PROPERTIES_PK PRIMARY KEY (PROPERTY_KEY);

-- Table NOTIFICATION_SEQUENCE for classes [org.apache.hadoop.hive.metastore.model.MNotificationNextId]
CREATE TABLE NOTIFICATION_SEQUENCE(NNI_ID BIGINT NOT NULL,NEXT_EVENT_ID BIGINT NOT NULL);

ALTER TABLE NOTIFICATION_SEQUENCE ADD CONSTRAINT NOTIFICATION_SEQUENCE_PK PRIMARY KEY (NNI_ID);

-- NOTE: MANUAL ADDITION: BEGIN: Initialize Notification Sequence ID
INSERT INTO NOTIFICATION_SEQUENCE (NNI_ID,NEXT_EVENT_ID) SELECT 1,1 FROM SYSIBM.DUAL WHERE NOT(EXISTS(SELECT NEXT_EVENT_ID FROM NOTIFICATION_SEQUENCE));
-- NOTE: MANUAL ADDITION: BEGIN: Initialize Notification Sequence ID

-- Table FUNCS for classes [org.apache.hadoop.hive.metastore.model.MFunction]
CREATE TABLE FUNCS(FUNC_ID BIGINT NOT NULL,CLASS_NAME VARCHAR(4000),CREATE_TIME INTEGER NOT NULL,DB_ID BIGINT,FUNC_NAME VARCHAR(128),FUNC_TYPE INTEGER NOT NULL,OWNER_NAME VARCHAR(128),OWNER_TYPE VARCHAR(10));

ALTER TABLE FUNCS ADD CONSTRAINT FUNCS_PK PRIMARY KEY (FUNC_ID);

-- Table CDS for classes [org.apache.hadoop.hive.metastore.model.MColumnDescriptor]
CREATE TABLE CDS(CD_ID BIGINT NOT NULL);

ALTER TABLE CDS ADD CONSTRAINT CDS_PK PRIMARY KEY (CD_ID);

-- Table KEY_CONSTRAINTS for classes [org.apache.hadoop.hive.metastore.model.MConstraint]
CREATE TABLE KEY_CONSTRAINTS("CONSTRAINT_NAME" VARCHAR(255) NOT NULL,"POSITION" INTEGER NOT NULL,CHILD_CD_ID BIGINT,CHILD_INTEGER_IDX INTEGER,CHILD_TBL_ID BIGINT,CONSTRAINT_TYPE INTEGER NOT NULL,DEFAULT_VALUE VARCHAR(255),DELETE_RULE INTEGER,ENABLE_VALIDATE_RELY INTEGER NOT NULL,PARENT_CD_ID BIGINT,PARENT_INTEGER_IDX INTEGER,PARENT_TBL_ID BIGINT,UPDATE_RULE INTEGER);

ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_PK PRIMARY KEY ("CONSTRAINT_NAME","POSITION");

-- Table IDXS for classes [org.apache.hadoop.hive.metastore.model.MIndex]
CREATE TABLE IDXS(INDEX_ID BIGINT NOT NULL,CREATE_TIME INTEGER NOT NULL,DEFERRED_REBUILD CHAR(1) NOT NULL CHECK (DEFERRED_REBUILD IN ('Y','N')),INDEX_HANDLER_CLASS VARCHAR(4000),INDEX_NAME VARCHAR(128),INDEX_TBL_ID BIGINT,LAST_ACCESS_TIME INTEGER NOT NULL,ORIG_TBL_ID BIGINT,SD_ID BIGINT);

ALTER TABLE IDXS ADD CONSTRAINT IDXS_PK PRIMARY KEY (INDEX_ID);

-- Table SCHEMA_VERSION for classes [org.apache.hadoop.hive.metastore.model.MSchemaVersion]
CREATE TABLE SCHEMA_VERSION(SCHEMA_VERSION_ID BIGINT NOT NULL,CD_ID BIGINT,CREATED_AT BIGINT NOT NULL,DESCRIPTION VARCHAR(4000),FINGERPRINT VARCHAR(256),SCHEMA_ID BIGINT NOT NULL,SCHEMA_VERSION_NAME VARCHAR(256),SCHEMA_TEXT LONG VARCHAR,SERDE_ID BIGINT,"STATE" INTEGER NOT NULL,VERSION INTEGER NOT NULL);

ALTER TABLE SCHEMA_VERSION ADD CONSTRAINT SCHEMA_VERSION_PK PRIMARY KEY (SCHEMA_VERSION_ID);

-- Table WM_TRIGGER for classes [org.apache.hadoop.hive.metastore.model.MWMTrigger]
CREATE TABLE WM_TRIGGER(TRIGGER_ID BIGINT NOT NULL,ACTION_EXPRESSION VARCHAR(255),IS_IN_UNMANAGED INTEGER NOT NULL,"NAME" VARCHAR(128) NOT NULL,RP_ID BIGINT NOT NULL,TRIGGER_EXPRESSION VARCHAR(255));

ALTER TABLE WM_TRIGGER ADD CONSTRAINT WM_TRIGGER_PK PRIMARY KEY (TRIGGER_ID);

-- Table WM_MAPPING for classes [org.apache.hadoop.hive.metastore.model.MWMMapping]
CREATE TABLE WM_MAPPING(MAPPING_ID BIGINT NOT NULL,ENTITY_NAME VARCHAR(128),ENTITY_TYPE VARCHAR(128),ORDERING INTEGER,POOL_ID BIGINT,RP_ID BIGINT NOT NULL);

ALTER TABLE WM_MAPPING ADD CONSTRAINT WM_MAPPING_PK PRIMARY KEY (MAPPING_ID);

-- Table WM_POOL for classes [org.apache.hadoop.hive.metastore.model.MWMPool]
CREATE TABLE WM_POOL(POOL_ID BIGINT NOT NULL,ALLOC_FRACTION DOUBLE,"PATH" VARCHAR(1024) NOT NULL,QUERY_PARALLELISM INTEGER,RP_ID BIGINT NOT NULL,SCHEDULING_POLICY VARCHAR(255));

ALTER TABLE WM_POOL ADD CONSTRAINT WM_POOL_PK PRIMARY KEY (POOL_ID);

-- Table MV_CREATION_METADATA for classes [org.apache.hadoop.hive.metastore.model.MCreationMetadata]
CREATE TABLE MV_CREATION_METADATA(MV_CREATION_METADATA_ID BIGINT NOT NULL,CAT_NAME VARCHAR(256),DB_NAME VARCHAR(128),MATERIALIZATIONTIME BIGINT NOT NULL,TBL_NAME VARCHAR(256),TXN_LIST CLOB(2147483647));

ALTER TABLE MV_CREATION_METADATA ADD CONSTRAINT MV_CREATION_METADATA_PK PRIMARY KEY (MV_CREATION_METADATA_ID);

-- Table SDS for classes [org.apache.hadoop.hive.metastore.model.MStorageDescriptor]
CREATE TABLE SDS(SD_ID BIGINT NOT NULL,CD_ID BIGINT,INPUT_FORMAT VARCHAR(4000),IS_COMPRESSED CHAR(1) NOT NULL CHECK (IS_COMPRESSED IN ('Y','N')),IS_STOREDASSUBDIRECTORIES CHAR(1) NOT NULL CHECK (IS_STOREDASSUBDIRECTORIES IN ('Y','N')),LOCATION VARCHAR(4000),NUM_BUCKETS INTEGER NOT NULL,OUTPUT_FORMAT VARCHAR(4000),SERDE_ID BIGINT);

ALTER TABLE SDS ADD CONSTRAINT SDS_PK PRIMARY KEY (SD_ID);

-- Table MASTER_KEYS for classes [org.apache.hadoop.hive.metastore.model.MMasterKey]
CREATE TABLE MASTER_KEYS(KEY_ID INTEGER NOT NULL,MASTER_KEY VARCHAR(767));

ALTER TABLE MASTER_KEYS ADD CONSTRAINT MASTER_KEYS_PK PRIMARY KEY (KEY_ID);

-- Table PART_COL_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MPartitionColumnPrivilege]
CREATE TABLE PART_COL_PRIVS(PART_COLUMN_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),"COLUMN_NAME" VARCHAR(767),CREATE_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PART_ID BIGINT,PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),PART_COL_PRIV VARCHAR(128));

ALTER TABLE PART_COL_PRIVS ADD CONSTRAINT PART_COL_PRIVS_PK PRIMARY KEY (PART_COLUMN_GRANT_ID);

-- Table WM_RESOURCEPLAN for classes [org.apache.hadoop.hive.metastore.model.MWMResourcePlan]
CREATE TABLE WM_RESOURCEPLAN(RP_ID BIGINT NOT NULL,DEFAULT_POOL_ID BIGINT,"NAME" VARCHAR(128) NOT NULL,QUERY_PARALLELISM INTEGER,STATUS VARCHAR(255) NOT NULL);

ALTER TABLE WM_RESOURCEPLAN ADD CONSTRAINT WM_RESOURCEPLAN_PK PRIMARY KEY (RP_ID);

-- Table PART_COL_STATS for classes [org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics]
CREATE TABLE PART_COL_STATS(CS_ID BIGINT NOT NULL,AVG_COL_LEN DOUBLE,BIT_VECTOR BLOB(2147483647),CAT_NAME VARCHAR(256) NOT NULL,"COLUMN_NAME" VARCHAR(767) NOT NULL,COLUMN_TYPE VARCHAR(128) NOT NULL,DB_NAME VARCHAR(128) NOT NULL,BIG_DECIMAL_HIGH_VALUE VARCHAR(255),BIG_DECIMAL_LOW_VALUE VARCHAR(255),DOUBLE_HIGH_VALUE DOUBLE,DOUBLE_LOW_VALUE DOUBLE,LAST_ANALYZED BIGINT NOT NULL,LONG_HIGH_VALUE BIGINT,LONG_LOW_VALUE BIGINT,MAX_COL_LEN BIGINT,NUM_DISTINCTS BIGINT,NUM_FALSES BIGINT,NUM_NULLS BIGINT NOT NULL,NUM_TRUES BIGINT,PART_ID BIGINT,PARTITION_NAME VARCHAR(767) NOT NULL,"TABLE_NAME" VARCHAR(256) NOT NULL);

ALTER TABLE PART_COL_STATS ADD CONSTRAINT PART_COL_STATS_PK PRIMARY KEY (CS_ID);

-- Table TAB_COL_STATS for classes [org.apache.hadoop.hive.metastore.model.MTableColumnStatistics]
CREATE TABLE TAB_COL_STATS(CS_ID BIGINT NOT NULL,AVG_COL_LEN DOUBLE,BIT_VECTOR BLOB(2147483647),CAT_NAME VARCHAR(256) NOT NULL,"COLUMN_NAME" VARCHAR(767) NOT NULL,COLUMN_TYPE VARCHAR(128) NOT NULL,DB_NAME VARCHAR(128) NOT NULL,BIG_DECIMAL_HIGH_VALUE VARCHAR(255),BIG_DECIMAL_LOW_VALUE VARCHAR(255),DOUBLE_HIGH_VALUE DOUBLE,DOUBLE_LOW_VALUE DOUBLE,LAST_ANALYZED BIGINT NOT NULL,LONG_HIGH_VALUE BIGINT,LONG_LOW_VALUE BIGINT,MAX_COL_LEN BIGINT,NUM_DISTINCTS BIGINT,NUM_FALSES BIGINT,NUM_NULLS BIGINT NOT NULL,NUM_TRUES BIGINT,TBL_ID BIGINT,"TABLE_NAME" VARCHAR(256) NOT NULL);

ALTER TABLE TAB_COL_STATS ADD CONSTRAINT TAB_COL_STATS_PK PRIMARY KEY (CS_ID);

-- Table GLOBAL_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MGlobalPrivilege]
CREATE TABLE GLOBAL_PRIVS(USER_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),CREATE_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),USER_PRIV VARCHAR(128));

ALTER TABLE GLOBAL_PRIVS ADD CONSTRAINT GLOBAL_PRIVS_PK PRIMARY KEY (USER_GRANT_ID);

-- Table TBLS for classes [org.apache.hadoop.hive.metastore.model.MTable]
CREATE TABLE TBLS(TBL_ID BIGINT NOT NULL,CREATE_TIME INTEGER NOT NULL,DB_ID BIGINT,LAST_ACCESS_TIME INTEGER NOT NULL,OWNER VARCHAR(767),OWNER_TYPE VARCHAR(10),RETENTION INTEGER NOT NULL,IS_REWRITE_ENABLED CHAR(1) NOT NULL CHECK (IS_REWRITE_ENABLED IN ('Y','N')),SD_ID BIGINT,TBL_NAME VARCHAR(256),TBL_TYPE VARCHAR(128),VIEW_EXPANDED_TEXT LONG VARCHAR,VIEW_ORIGINAL_TEXT LONG VARCHAR,WRITE_ID BIGINT NOT NULL);

ALTER TABLE TBLS ADD CONSTRAINT TBLS_PK PRIMARY KEY (TBL_ID);

-- Table TBL_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MTablePrivilege]
CREATE TABLE TBL_PRIVS(TBL_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),CREATE_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),TBL_PRIV VARCHAR(128),TBL_ID BIGINT);

ALTER TABLE TBL_PRIVS ADD CONSTRAINT TBL_PRIVS_PK PRIMARY KEY (TBL_GRANT_ID);

-- Table SERDES for classes [org.apache.hadoop.hive.metastore.model.MSerDeInfo]
CREATE TABLE SERDES(SERDE_ID BIGINT NOT NULL,DESCRIPTION VARCHAR(4000),DESERIALIZER_CLASS VARCHAR(4000),"NAME" VARCHAR(128),SERDE_TYPE INTEGER,SLIB VARCHAR(4000),SERIALIZER_CLASS VARCHAR(4000));

ALTER TABLE SERDES ADD CONSTRAINT SERDES_PK PRIMARY KEY (SERDE_ID);

-- Table NOTIFICATION_LOG for classes [org.apache.hadoop.hive.metastore.model.MNotificationLog]
CREATE TABLE NOTIFICATION_LOG(NL_ID BIGINT NOT NULL,CAT_NAME VARCHAR(256),DB_NAME VARCHAR(128),EVENT_ID BIGINT NOT NULL,EVENT_TIME INTEGER NOT NULL,EVENT_TYPE VARCHAR(32) NOT NULL,MESSAGE LONG VARCHAR,MESSAGE_FORMAT VARCHAR(16),TBL_NAME VARCHAR(256));

ALTER TABLE NOTIFICATION_LOG ADD CONSTRAINT NOTIFICATION_LOG_PK PRIMARY KEY (NL_ID);

-- NOTE: MANUAL ADDITION: BEGIN: NOTIFICATION_LOG Initialization
INSERT INTO SEQUENCE_TABLE (SEQUENCE_NAME, NEXT_VAL) VALUES ('org.apache.hadoop.hive.metastore.model.MNotificationLog', 1);
-- NOTE: MANUAL ADDITION: END: NOTIFICATION_LOG Initialization

-- Table PARTITION_EVENTS for classes [org.apache.hadoop.hive.metastore.model.MPartitionEvent]
CREATE TABLE PARTITION_EVENTS(PART_NAME_ID BIGINT NOT NULL,CAT_NAME VARCHAR(256),DB_NAME VARCHAR(128),EVENT_TIME BIGINT NOT NULL,EVENT_TYPE INTEGER NOT NULL,PARTITION_NAME VARCHAR(767),TBL_NAME VARCHAR(256));

ALTER TABLE PARTITION_EVENTS ADD CONSTRAINT PARTITION_EVENTS_PK PRIMARY KEY (PART_NAME_ID);

-- Table TBL_COL_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MTableColumnPrivilege]
CREATE TABLE TBL_COL_PRIVS(TBL_COLUMN_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),"COLUMN_NAME" VARCHAR(767),CREATE_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),TBL_COL_PRIV VARCHAR(128),TBL_ID BIGINT);

ALTER TABLE TBL_COL_PRIVS ADD CONSTRAINT TBL_COL_PRIVS_PK PRIMARY KEY (TBL_COLUMN_GRANT_ID);

-- Table RUNTIME_STATS for classes [org.apache.hadoop.hive.metastore.model.MRuntimeStat]
CREATE TABLE RUNTIME_STATS(RS_ID BIGINT NOT NULL,CREATE_TIME INTEGER NOT NULL,PAYLOAD BLOB(2147483647),WEIGHT INTEGER NOT NULL);

ALTER TABLE RUNTIME_STATS ADD CONSTRAINT RUNTIME_STATS_PK PRIMARY KEY (RS_ID);

-- Table VERSION for classes [org.apache.hadoop.hive.metastore.model.MVersionTable]
CREATE TABLE VERSION(VER_ID BIGINT NOT NULL,SCHEMA_VERSION VARCHAR(127) NOT NULL,VERSION_COMMENT VARCHAR(255) NOT NULL);

ALTER TABLE VERSION ADD CONSTRAINT VERSION_PK PRIMARY KEY (VER_ID);

-- Table PART_PRIVS for classes [org.apache.hadoop.hive.metastore.model.MPartitionPrivilege]
CREATE TABLE PART_PRIVS(PART_GRANT_ID BIGINT NOT NULL,AUTHORIZER VARCHAR(128),CREATE_TIME INTEGER NOT NULL,GRANT_OPTION SMALLINT NOT NULL CHECK (GRANT_OPTION IN (0,1)),GRANTOR VARCHAR(128),GRANTOR_TYPE VARCHAR(128),PART_ID BIGINT,PRINCIPAL_NAME VARCHAR(128),PRINCIPAL_TYPE VARCHAR(128),PART_PRIV VARCHAR(128));

ALTER TABLE PART_PRIVS ADD CONSTRAINT PART_PRIVS_PK PRIMARY KEY (PART_GRANT_ID);

-- Table DELEGATION_TOKENS for classes [org.apache.hadoop.hive.metastore.model.MDelegationToken]
CREATE TABLE DELEGATION_TOKENS(TOKEN_IDENT VARCHAR(767) NOT NULL,TOKEN VARCHAR(767));

ALTER TABLE DELEGATION_TOKENS ADD CONSTRAINT DELEGATION_TOKENS_PK PRIMARY KEY (TOKEN_IDENT);

-- Table PARTITION_KEYS for join relationship
CREATE TABLE PARTITION_KEYS(TBL_ID BIGINT NOT NULL,PKEY_COMMENT VARCHAR(4000),PKEY_NAME VARCHAR(128) NOT NULL,PKEY_TYPE VARCHAR(767) NOT NULL,INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE PARTITION_KEYS ADD CONSTRAINT PARTITION_KEY_PK PRIMARY KEY (TBL_ID,PKEY_NAME);

-- Table PARTITION_PARAMS for join relationship
CREATE TABLE PARTITION_PARAMS(PART_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(256) NOT NULL,PARAM_VALUE VARCHAR(4000));

ALTER TABLE PARTITION_PARAMS ADD CONSTRAINT PARTITION_PARAMS_PK PRIMARY KEY (PART_ID,PARAM_KEY);

-- Table MV_TABLES_USED for join relationship
CREATE TABLE MV_TABLES_USED(MV_CREATION_METADATA_ID BIGINT NOT NULL,TBL_ID BIGINT NOT NULL);

-- NOTE: MANUAL REMOVAL: BEGIN: MV_TABLES_USED_PK
--ALTER TABLE MV_TABLES_USED ADD CONSTRAINT MV_TABLES_USED_PK PRIMARY KEY (MV_CREATION_METADATA_ID,TBL_ID);
-- NOTE: MANUAL REMOVAL: BEGIN: MV_TABLES_USED_PK

-- Table SKEWED_VALUES for join relationship
CREATE TABLE SKEWED_VALUES(SD_ID_OID BIGINT NOT NULL,STRING_LIST_ID_EID BIGINT,INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE SKEWED_VALUES ADD CONSTRAINT SKEWED_VALUES_PK PRIMARY KEY (SD_ID_OID,INTEGER_IDX);

-- Table DATABASE_PARAMS for join relationship
CREATE TABLE DATABASE_PARAMS(DB_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(180) NOT NULL,PARAM_VALUE VARCHAR(4000));

ALTER TABLE DATABASE_PARAMS ADD CONSTRAINT DATABASE_PARAMS_PK PRIMARY KEY (DB_ID,PARAM_KEY);

-- Table BUCKETING_COLS for join relationship
CREATE TABLE BUCKETING_COLS(SD_ID BIGINT NOT NULL,BUCKET_COL_NAME VARCHAR(255),INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE BUCKETING_COLS ADD CONSTRAINT BUCKETING_COLS_PK PRIMARY KEY (SD_ID,INTEGER_IDX);

-- Table WM_POOL_TO_TRIGGER for join relationship
CREATE TABLE WM_POOL_TO_TRIGGER(TRIGGER_ID BIGINT NOT NULL,POOL_ID BIGINT NOT NULL);

ALTER TABLE WM_POOL_TO_TRIGGER ADD CONSTRAINT WM_POOL_TO_TRIGGER_PK PRIMARY KEY (TRIGGER_ID,POOL_ID);

-- Table SD_PARAMS for join relationship
CREATE TABLE SD_PARAMS(SD_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(256) NOT NULL,PARAM_VALUE VARCHAR(32672));

ALTER TABLE SD_PARAMS ADD CONSTRAINT SD_PARAMS_PK PRIMARY KEY (SD_ID,PARAM_KEY);

-- Table FUNC_RU for join relationship
CREATE TABLE FUNC_RU(FUNC_ID BIGINT NOT NULL,RESOURCE_TYPE INTEGER NOT NULL,RESOURCE_URI VARCHAR(4000),INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE FUNC_RU ADD CONSTRAINT FUNC_RU_PK PRIMARY KEY (FUNC_ID,INTEGER_IDX);

-- Table SKEWED_COL_VALUE_LOC_MAP for join relationship
CREATE TABLE SKEWED_COL_VALUE_LOC_MAP(SD_ID BIGINT NOT NULL,STRING_LIST_ID_KID BIGINT NOT NULL,LOCATION VARCHAR(4000));

ALTER TABLE SKEWED_COL_VALUE_LOC_MAP ADD CONSTRAINT SKEWED_COL_VALUE_LOC_MAP_PK PRIMARY KEY (SD_ID,STRING_LIST_ID_KID);

-- Table SERDE_PARAMS for join relationship
CREATE TABLE SERDE_PARAMS(SERDE_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(256) NOT NULL,PARAM_VALUE VARCHAR(32672));

ALTER TABLE SERDE_PARAMS ADD CONSTRAINT SERDE_PARAMS_PK PRIMARY KEY (SERDE_ID,PARAM_KEY);

-- Table COLUMNS_V2 for join relationship
CREATE TABLE COLUMNS_V2(CD_ID BIGINT NOT NULL,"COMMENT" VARCHAR(256),"COLUMN_NAME" VARCHAR(767) NOT NULL,TYPE_NAME VARCHAR(32672) NOT NULL,INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE COLUMNS_V2 ADD CONSTRAINT COLUMNS_V2_PK PRIMARY KEY (CD_ID,"COLUMN_NAME");

-- Table TABLE_PARAMS for join relationship
CREATE TABLE TABLE_PARAMS(TBL_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(256) NOT NULL,PARAM_VALUE VARCHAR(32672));

ALTER TABLE TABLE_PARAMS ADD CONSTRAINT TABLE_PARAMS_PK PRIMARY KEY (TBL_ID,PARAM_KEY);

-- Table INDEX_PARAMS for join relationship
CREATE TABLE INDEX_PARAMS(INDEX_ID BIGINT NOT NULL,PARAM_KEY VARCHAR(256) NOT NULL,PARAM_VALUE VARCHAR(4000));

ALTER TABLE INDEX_PARAMS ADD CONSTRAINT INDEX_PARAMS_PK PRIMARY KEY (INDEX_ID,PARAM_KEY);

-- Table PARTITION_KEY_VALS for join relationship
CREATE TABLE PARTITION_KEY_VALS(PART_ID BIGINT NOT NULL,PART_KEY_VAL VARCHAR(255),INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE PARTITION_KEY_VALS ADD CONSTRAINT PARTITION_KEY_VALS_PK PRIMARY KEY (PART_ID,INTEGER_IDX);

-- Table SKEWED_STRING_LIST_VALUES for join relationship
CREATE TABLE SKEWED_STRING_LIST_VALUES(STRING_LIST_ID BIGINT NOT NULL,STRING_LIST_VALUE VARCHAR(255),INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE SKEWED_STRING_LIST_VALUES ADD CONSTRAINT SKEWED_STRING_LIST_VALUES_PK PRIMARY KEY (STRING_LIST_ID,INTEGER_IDX);

-- Table TYPE_FIELDS for join relationship
CREATE TABLE TYPE_FIELDS(TYPE_NAME BIGINT NOT NULL,"COMMENT" VARCHAR(256),FIELD_NAME VARCHAR(128) NOT NULL,FIELD_TYPE VARCHAR(767) NOT NULL,INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE TYPE_FIELDS ADD CONSTRAINT TYPE_FIELDS_PK PRIMARY KEY (TYPE_NAME,FIELD_NAME);

-- Table SORT_COLS for join relationship
CREATE TABLE SORT_COLS(SD_ID BIGINT NOT NULL,"COLUMN_NAME" VARCHAR(767),"ORDER" INTEGER NOT NULL,INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE SORT_COLS ADD CONSTRAINT SORT_COLS_PK PRIMARY KEY (SD_ID,INTEGER_IDX);

-- Table SKEWED_COL_NAMES for join relationship
CREATE TABLE SKEWED_COL_NAMES(SD_ID BIGINT NOT NULL,SKEWED_COL_NAME VARCHAR(255),INTEGER_IDX INTEGER NOT NULL);

ALTER TABLE SKEWED_COL_NAMES ADD CONSTRAINT SKEWED_COL_NAMES_PK PRIMARY KEY (SD_ID,INTEGER_IDX);

-- Constraints for table DB_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MDBPrivilege]
ALTER TABLE DB_PRIVS ADD CONSTRAINT DB_PRIVS_FK1 FOREIGN KEY (DB_ID) REFERENCES DBS (DB_ID) ;

CREATE INDEX DB_PRIVS_N49 ON DB_PRIVS (DB_ID);

CREATE UNIQUE INDEX DBPRIVILEGEINDEX ON DB_PRIVS (AUTHORIZER,DB_ID,PRINCIPAL_NAME,PRINCIPAL_TYPE,DB_PRIV,GRANTOR,GRANTOR_TYPE);


-- Constraints for table ROLE_MAP for class(es) [org.apache.hadoop.hive.metastore.model.MRoleMap]
ALTER TABLE ROLE_MAP ADD CONSTRAINT ROLE_MAP_FK1 FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ROLE_ID) ;

CREATE INDEX ROLE_MAP_N49 ON ROLE_MAP (ROLE_ID);

CREATE UNIQUE INDEX USERROLEMAPINDEX ON ROLE_MAP (PRINCIPAL_NAME,ROLE_ID,GRANTOR,GRANTOR_TYPE);


-- Constraints for table I_SCHEMA for class(es) [org.apache.hadoop.hive.metastore.model.MISchema]
ALTER TABLE I_SCHEMA ADD CONSTRAINT I_SCHEMA_FK1 FOREIGN KEY (DB_ID) REFERENCES DBS (DB_ID) ;

-- NOTE: MANUAL ADDITION: BEGIN: I_SCHEMA Constraints
ALTER TABLE I_SCHEMA ADD CONSTRAINT I_SCHEMA_UNIQUE_NAME UNIQUE ("NAME") ;
-- NOTE: MANUAL ADDITION: BEGIN: I_SCHEMA Constraints

-- NOTE: MANUAL REMOVAL: BEGIN: I_SCHEMA Constraints
--CREATE INDEX I_SCHEMA_N49 ON I_SCHEMA (DB_ID);
-- NOTE: MANUAL REMOVAL: END: I_SCHEMA Constraints


-- Constraints for table TYPES for class(es) [org.apache.hadoop.hive.metastore.model.MType]
CREATE UNIQUE INDEX UNIQUETYPE ON TYPES (TYPE_NAME);


-- Constraints for table PARTITIONS for class(es) [org.apache.hadoop.hive.metastore.model.MPartition]
ALTER TABLE PARTITIONS ADD CONSTRAINT PARTITIONS_FK1 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

ALTER TABLE PARTITIONS ADD CONSTRAINT PARTITIONS_FK2 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE UNIQUE INDEX UNIQUEPARTITION ON PARTITIONS (PART_NAME,TBL_ID);

CREATE INDEX PARTITIONS_N50 ON PARTITIONS (SD_ID);

CREATE INDEX PARTITIONS_N49 ON PARTITIONS (TBL_ID);


-- Constraints for table CTLGS for class(es) [org.apache.hadoop.hive.metastore.model.MCatalog]
-- NOTE: MANUAL REMOVAL: BEGIN: CTLGS Constraints
--CREATE UNIQUE INDEX UNIQUECATALOG ON CTLGS ("NAME");
-- NOTE: MANUAL REMOVAL: END: CTLGS Constraints


-- Constraints for table SKEWED_STRING_LIST for class(es) [org.apache.hadoop.hive.metastore.model.MStringList]

-- Constraints for table DBS for class(es) [org.apache.hadoop.hive.metastore.model.MDatabase]
CREATE UNIQUE INDEX UNIQUEDATABASE ON DBS ("NAME",CTLG_NAME);


-- Constraints for table METASTORE_DB_PROPERTIES for class(es) [org.apache.hadoop.hive.metastore.model.MMetastoreDBProperties]

-- Constraints for table NOTIFICATION_SEQUENCE for class(es) [org.apache.hadoop.hive.metastore.model.MNotificationNextId]

-- Constraints for table FUNCS for class(es) [org.apache.hadoop.hive.metastore.model.MFunction]
ALTER TABLE FUNCS ADD CONSTRAINT FUNCS_FK1 FOREIGN KEY (DB_ID) REFERENCES DBS (DB_ID) ;

CREATE INDEX FUNCS_N49 ON FUNCS (DB_ID);

CREATE UNIQUE INDEX UNIQUEFUNCTION ON FUNCS (FUNC_NAME,DB_ID);


-- Constraints for table CDS for class(es) [org.apache.hadoop.hive.metastore.model.MColumnDescriptor]

-- Constraints for table KEY_CONSTRAINTS for class(es) [org.apache.hadoop.hive.metastore.model.MConstraint]

-- NOTE: MANUAL ADDITION: BEGIN: KEY_CONSTRAINTS Constraints
CREATE INDEX CONSTRAINTS_PT_INDEX ON KEY_CONSTRAINTS(PARENT_TBL_ID);

CREATE INDEX CONSTRAINTS_CT_INDEX ON KEY_CONSTRAINTS(CONSTRAINT_TYPE);
-- NOTE: MANUAL ADDITION: BEGIN: KEY_CONSTRAINTS Constraints

-- NOTE: MANUAL REMOVAL: BEGIN: KEY_CONSTRAINTS Constraints
--ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK1 FOREIGN KEY (CHILD_CD_ID) REFERENCES CDS (CD_ID) ;
--
--ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK3 FOREIGN KEY (PARENT_CD_ID) REFERENCES CDS (CD_ID) ;
--
--ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK2 FOREIGN KEY (CHILD_TBL_ID) REFERENCES TBLS (TBL_ID) ;
--
--ALTER TABLE KEY_CONSTRAINTS ADD CONSTRAINT KEY_CONSTRAINTS_FK4 FOREIGN KEY (PARENT_TBL_ID) REFERENCES TBLS (TBL_ID) ;
--
--CREATE INDEX KEY_CONSTRAINTS_N51 ON KEY_CONSTRAINTS (CHILD_CD_ID);
--
--CREATE INDEX KEY_CONSTRAINTS_N50 ON KEY_CONSTRAINTS (PARENT_TBL_ID);
--
--CREATE INDEX KEY_CONSTRAINTS_N52 ON KEY_CONSTRAINTS (PARENT_CD_ID);
--
--CREATE INDEX KEY_CONSTRAINTS_N49 ON KEY_CONSTRAINTS (CHILD_TBL_ID);
-- NOTE: MANUAL REMOVAL: END: KEY_CONSTRAINTS Constraints


-- Constraints for table IDXS for class(es) [org.apache.hadoop.hive.metastore.model.MIndex]
ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK3 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK2 FOREIGN KEY (ORIG_TBL_ID) REFERENCES TBLS (TBL_ID) ;

ALTER TABLE IDXS ADD CONSTRAINT IDXS_FK1 FOREIGN KEY (INDEX_TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE UNIQUE INDEX UNIQUEINDEX ON IDXS (INDEX_NAME,ORIG_TBL_ID);

CREATE INDEX IDXS_N51 ON IDXS (INDEX_TBL_ID);

CREATE INDEX IDXS_N50 ON IDXS (ORIG_TBL_ID);

CREATE INDEX IDXS_N49 ON IDXS (SD_ID);


-- Constraints for table SCHEMA_VERSION for class(es) [org.apache.hadoop.hive.metastore.model.MSchemaVersion]
ALTER TABLE SCHEMA_VERSION ADD CONSTRAINT SCHEMA_VERSION_FK3 FOREIGN KEY (SERDE_ID) REFERENCES SERDES (SERDE_ID) ;

ALTER TABLE SCHEMA_VERSION ADD CONSTRAINT SCHEMA_VERSION_FK2 FOREIGN KEY (SCHEMA_ID) REFERENCES I_SCHEMA (SCHEMA_ID) ;

ALTER TABLE SCHEMA_VERSION ADD CONSTRAINT SCHEMA_VERSION_FK1 FOREIGN KEY (CD_ID) REFERENCES CDS (CD_ID) ;

-- NOTE: MANUAL ADDITION: BEGIN: SCHEMA_VERSION Constraints
ALTER TABLE SCHEMA_VERSION ADD CONSTRAINT SCHEMA_VERSION_UNIQUE_SCHEMA_ID_VERSION UNIQUE (SCHEMA_ID,"VERSION");
-- NOTE: MANUAL ADDITION: BEGIN: SCHEMA_VERSION Constraints

-- NOTE: MANUAL REMOVAL: BEGIN: SCHEMA_VERSION Constraints
--CREATE INDEX SCHEMA_VERSION_N49 ON SCHEMA_VERSION (SCHEMA_ID);
--
--CREATE INDEX SCHEMA_VERSION_N50 ON SCHEMA_VERSION (SERDE_ID);
--
--CREATE INDEX SCHEMA_VERSION_N51 ON SCHEMA_VERSION (CD_ID);
-- NOTE: MANUAL REMOVAL: END: SCHEMA_VERSION Constraints


-- Constraints for table WM_TRIGGER for class(es) [org.apache.hadoop.hive.metastore.model.MWMTrigger]
ALTER TABLE WM_TRIGGER ADD CONSTRAINT WM_TRIGGER_FK1 FOREIGN KEY (RP_ID) REFERENCES WM_RESOURCEPLAN (RP_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: WM_TRIGGER Constraints
--CREATE INDEX WM_TRIGGER_N49 ON WM_TRIGGER (RP_ID);
-- NOTE: MANUAL REMOVAL: END: WM_TRIGGER Constraints

CREATE UNIQUE INDEX UNIQUEWMTRIGGER ON WM_TRIGGER (RP_ID,"NAME");


-- Constraints for table WM_MAPPING for class(es) [org.apache.hadoop.hive.metastore.model.MWMMapping]
ALTER TABLE WM_MAPPING ADD CONSTRAINT WM_MAPPING_FK1 FOREIGN KEY (POOL_ID) REFERENCES WM_POOL (POOL_ID) ;

ALTER TABLE WM_MAPPING ADD CONSTRAINT WM_MAPPING_FK2 FOREIGN KEY (RP_ID) REFERENCES WM_RESOURCEPLAN (RP_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: WM_MAPPING Constraints
--CREATE INDEX WM_MAPPING_N49 ON WM_MAPPING (POOL_ID);
--
--CREATE INDEX WM_MAPPING_N50 ON WM_MAPPING (RP_ID);
-- NOTE: MANUAL REMOVAL: END: WM_MAPPING Constraints

CREATE UNIQUE INDEX UNIQUEWMMAPPING ON WM_MAPPING (RP_ID,ENTITY_TYPE,ENTITY_NAME);


-- Constraints for table WM_POOL for class(es) [org.apache.hadoop.hive.metastore.model.MWMPool]
ALTER TABLE WM_POOL ADD CONSTRAINT WM_POOL_FK1 FOREIGN KEY (RP_ID) REFERENCES WM_RESOURCEPLAN (RP_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: WM_POOL Constraints
--CREATE INDEX WM_POOL_N49 ON WM_POOL (RP_ID);
-- NOTE: MANUAL REMOVAL: END: WM_POOL Constraints

CREATE UNIQUE INDEX UNIQUEWMPOOL ON WM_POOL (RP_ID,"PATH");


-- Constraints for table MV_CREATION_METADATA for class(es) [org.apache.hadoop.hive.metastore.model.MCreationMetadata]
-- NOTE: MANUAL ADDITION: BEGIN: MV_CREATION_METADATA Constraints
CREATE INDEX MV_UNIQUE_TABLE ON MV_CREATION_METADATA (TBL_NAME,DB_NAME);
-- NOTE: MANUAL ADDITION: BEGIN: MV_CREATION_METADATA Constraints

-- Constraints for table SDS for class(es) [org.apache.hadoop.hive.metastore.model.MStorageDescriptor]
ALTER TABLE SDS ADD CONSTRAINT SDS_FK1 FOREIGN KEY (CD_ID) REFERENCES CDS (CD_ID) ;

ALTER TABLE SDS ADD CONSTRAINT SDS_FK2 FOREIGN KEY (SERDE_ID) REFERENCES SERDES (SERDE_ID) ;

CREATE INDEX SDS_N50 ON SDS (SERDE_ID);

CREATE INDEX SDS_N49 ON SDS (CD_ID);


-- Constraints for table MASTER_KEYS for class(es) [org.apache.hadoop.hive.metastore.model.MMasterKey]

-- Constraints for table PART_COL_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MPartitionColumnPrivilege]
ALTER TABLE PART_COL_PRIVS ADD CONSTRAINT PART_COL_PRIVS_FK1 FOREIGN KEY (PART_ID) REFERENCES PARTITIONS (PART_ID) ;

CREATE INDEX PARTITIONCOLUMNPRIVILEGEINDEX ON PART_COL_PRIVS (AUTHORIZER,PART_ID,"COLUMN_NAME",PRINCIPAL_NAME,PRINCIPAL_TYPE,PART_COL_PRIV,GRANTOR,GRANTOR_TYPE);

CREATE INDEX PART_COL_PRIVS_N49 ON PART_COL_PRIVS (PART_ID);


-- Constraints for table WM_RESOURCEPLAN for class(es) [org.apache.hadoop.hive.metastore.model.MWMResourcePlan]
ALTER TABLE WM_RESOURCEPLAN ADD CONSTRAINT WM_RESOURCEPLAN_FK1 FOREIGN KEY (DEFAULT_POOL_ID) REFERENCES WM_POOL (POOL_ID) ;

CREATE UNIQUE INDEX UNIQUERESOURCEPLAN ON WM_RESOURCEPLAN ("NAME");

-- NOTE: MANUAL REMOVAL: BEGIN: WM_RESOURCEPLAN Constraints
--CREATE INDEX WM_RESOURCEPLAN_N49 ON WM_RESOURCEPLAN (DEFAULT_POOL_ID);
-- NOTE: MANUAL REMOVAL: END: WM_RESOURCEPLAN Constraints


-- Constraints for table PART_COL_STATS for class(es) [org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics]
ALTER TABLE PART_COL_STATS ADD CONSTRAINT PART_COL_STATS_FK1 FOREIGN KEY (PART_ID) REFERENCES PARTITIONS (PART_ID) ;

CREATE INDEX PART_COL_STATS_N49 ON PART_COL_STATS (PART_ID);

-- NOTE: MANUAL ADDITION: BEGIN: PCS_STATS_IDX Index
CREATE INDEX PCS_STATS_IDX ON PART_COL_STATS (CAT_NAME,DB_NAME,TABLE_NAME,COLUMN_NAME,PARTITION_NAME);
-- NOTE: MANUAL ADDITION: BEGIN: PCS_STATS_IDX Index

-- Constraints for table TAB_COL_STATS for class(es) [org.apache.hadoop.hive.metastore.model.MTableColumnStatistics]
ALTER TABLE TAB_COL_STATS ADD CONSTRAINT TAB_COL_STATS_FK1 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE INDEX TAB_COL_STATS_N49 ON TAB_COL_STATS (TBL_ID);

-- NOTE: MANUAL ADDITION: BEGIN: TAB_COL_STATS_IDX Index
CREATE INDEX TAB_COL_STATS_IDX ON TAB_COL_STATS (CAT_NAME,DB_NAME,TABLE_NAME,COLUMN_NAME);
-- NOTE: MANUAL ADDITION: BEGIN: TAB_COL_STATS_IDX Index


-- Constraints for table GLOBAL_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MGlobalPrivilege]
CREATE UNIQUE INDEX GLOBALPRIVILEGEINDEX ON GLOBAL_PRIVS (AUTHORIZER,PRINCIPAL_NAME,PRINCIPAL_TYPE,USER_PRIV,GRANTOR,GRANTOR_TYPE);


-- Constraints for table TBLS for class(es) [org.apache.hadoop.hive.metastore.model.MTable]
ALTER TABLE TBLS ADD CONSTRAINT TBLS_FK1 FOREIGN KEY (DB_ID) REFERENCES DBS (DB_ID) ;

ALTER TABLE TBLS ADD CONSTRAINT TBLS_FK2 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

CREATE INDEX TBLS_N50 ON TBLS (DB_ID);

CREATE INDEX TBLS_N49 ON TBLS (SD_ID);

CREATE UNIQUE INDEX UNIQUETABLE ON TBLS (TBL_NAME,DB_ID);


-- Constraints for table TBL_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MTablePrivilege]
ALTER TABLE TBL_PRIVS ADD CONSTRAINT TBL_PRIVS_FK1 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE INDEX TABLEPRIVILEGEINDEX ON TBL_PRIVS (AUTHORIZER,TBL_ID,PRINCIPAL_NAME,PRINCIPAL_TYPE,TBL_PRIV,GRANTOR,GRANTOR_TYPE);

CREATE INDEX TBL_PRIVS_N49 ON TBL_PRIVS (TBL_ID);


-- Constraints for table SERDES for class(es) [org.apache.hadoop.hive.metastore.model.MSerDeInfo]

-- Constraints for table NOTIFICATION_LOG for class(es) [org.apache.hadoop.hive.metastore.model.MNotificationLog]

-- Constraints for table PARTITION_EVENTS for class(es) [org.apache.hadoop.hive.metastore.model.MPartitionEvent]
CREATE INDEX PARTITIONEVENTINDEX ON PARTITION_EVENTS (PARTITION_NAME);


-- Constraints for table TBL_COL_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MTableColumnPrivilege]
ALTER TABLE TBL_COL_PRIVS ADD CONSTRAINT TBL_COL_PRIVS_FK1 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE INDEX TABLECOLUMNPRIVILEGEINDEX ON TBL_COL_PRIVS (AUTHORIZER,TBL_ID,"COLUMN_NAME",PRINCIPAL_NAME,PRINCIPAL_TYPE,TBL_COL_PRIV,GRANTOR,GRANTOR_TYPE);

CREATE INDEX TBL_COL_PRIVS_N49 ON TBL_COL_PRIVS (TBL_ID);


-- Constraints for table RUNTIME_STATS for class(es) [org.apache.hadoop.hive.metastore.model.MRuntimeStat]
-- NOTE: MANUAL ADDITION: BEGIN: RUNTIME_STATS Constraints
CREATE INDEX IDX_RUNTIME_STATS_CREATE_TIME ON RUNTIME_STATS(CREATE_TIME);
-- NOTE: MANUAL ADDITION: END: RUNTIME_STATS Constraints

-- Constraints for table VERSION for class(es) [org.apache.hadoop.hive.metastore.model.MVersionTable]

-- Constraints for table PART_PRIVS for class(es) [org.apache.hadoop.hive.metastore.model.MPartitionPrivilege]
ALTER TABLE PART_PRIVS ADD CONSTRAINT PART_PRIVS_FK1 FOREIGN KEY (PART_ID) REFERENCES PARTITIONS (PART_ID) ;

CREATE INDEX PART_PRIVS_N49 ON PART_PRIVS (PART_ID);

CREATE INDEX PARTPRIVILEGEINDEX ON PART_PRIVS (AUTHORIZER,PART_ID,PRINCIPAL_NAME,PRINCIPAL_TYPE,PART_PRIV,GRANTOR,GRANTOR_TYPE);


-- Constraints for table DELEGATION_TOKENS for class(es) [org.apache.hadoop.hive.metastore.model.MDelegationToken]

-- Constraints for table ROLES for class(es) [org.apache.hadoop.hive.metastore.model.MRole]
CREATE UNIQUE INDEX ROLEENTITYINDEX ON ROLES (ROLE_NAME);


-- Constraints for table PARTITION_KEYS
ALTER TABLE PARTITION_KEYS ADD CONSTRAINT PARTITION_KEYS_FK1 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE INDEX PARTITION_KEYS_N49 ON PARTITION_KEYS (TBL_ID);


-- Constraints for table PARTITION_PARAMS
ALTER TABLE PARTITION_PARAMS ADD CONSTRAINT PARTITION_PARAMS_FK1 FOREIGN KEY (PART_ID) REFERENCES PARTITIONS (PART_ID) ;

CREATE INDEX PARTITION_PARAMS_N49 ON PARTITION_PARAMS (PART_ID);


-- Constraints for table MV_TABLES_USED
ALTER TABLE MV_TABLES_USED ADD CONSTRAINT MV_TABLES_USED_FK2 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

ALTER TABLE MV_TABLES_USED ADD CONSTRAINT MV_TABLES_USED_FK1 FOREIGN KEY (MV_CREATION_METADATA_ID) REFERENCES MV_CREATION_METADATA (MV_CREATION_METADATA_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: MV_TABLES_USED Constraints
--CREATE INDEX MV_TABLES_USED_N49 ON MV_TABLES_USED (MV_CREATION_METADATA_ID);
--
--CREATE INDEX MV_TABLES_USED_N50 ON MV_TABLES_USED (TBL_ID);
-- NOTE: MANUAL REMOVAL: END: MV_TABLES_USED Constraints


-- Constraints for table SKEWED_VALUES
ALTER TABLE SKEWED_VALUES ADD CONSTRAINT SKEWED_VALUES_FK1 FOREIGN KEY (SD_ID_OID) REFERENCES SDS (SD_ID) ;

ALTER TABLE SKEWED_VALUES ADD CONSTRAINT SKEWED_VALUES_FK2 FOREIGN KEY (STRING_LIST_ID_EID) REFERENCES SKEWED_STRING_LIST (STRING_LIST_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: SKEWED_VALUES Constraints
--CREATE INDEX SKEWED_VALUES_N50 ON SKEWED_VALUES (STRING_LIST_ID_EID);
--
--CREATE INDEX SKEWED_VALUES_N49 ON SKEWED_VALUES (SD_ID_OID);
-- NOTE: MANUAL REMOVAL: END: SKEWED_VALUES Constraints


-- Constraints for table DATABASE_PARAMS
ALTER TABLE DATABASE_PARAMS ADD CONSTRAINT DATABASE_PARAMS_FK1 FOREIGN KEY (DB_ID) REFERENCES DBS (DB_ID) ;

CREATE INDEX DATABASE_PARAMS_N49 ON DATABASE_PARAMS (DB_ID);


-- Constraints for table BUCKETING_COLS
ALTER TABLE BUCKETING_COLS ADD CONSTRAINT BUCKETING_COLS_FK1 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

CREATE INDEX BUCKETING_COLS_N49 ON BUCKETING_COLS (SD_ID);


-- Constraints for table WM_POOL_TO_TRIGGER
ALTER TABLE WM_POOL_TO_TRIGGER ADD CONSTRAINT WM_POOL_TO_TRIGGER_FK2 FOREIGN KEY (POOL_ID) REFERENCES WM_POOL (POOL_ID) ;

ALTER TABLE WM_POOL_TO_TRIGGER ADD CONSTRAINT WM_POOL_TO_TRIGGER_FK1 FOREIGN KEY (TRIGGER_ID) REFERENCES WM_TRIGGER (TRIGGER_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: WM_POOL_TO_TRIGGER Constraints
--CREATE INDEX WM_POOL_TO_TRIGGER_N50 ON WM_POOL_TO_TRIGGER (POOL_ID);
--
--CREATE INDEX WM_POOL_TO_TRIGGER_N49 ON WM_POOL_TO_TRIGGER (TRIGGER_ID);
-- NOTE: MANUAL REMOVAL: END: WM_POOL_TO_TRIGGER Constraints


-- Constraints for table SD_PARAMS
ALTER TABLE SD_PARAMS ADD CONSTRAINT SD_PARAMS_FK1 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

CREATE INDEX SD_PARAMS_N49 ON SD_PARAMS (SD_ID);


-- Constraints for table FUNC_RU
ALTER TABLE FUNC_RU ADD CONSTRAINT FUNC_RU_FK1 FOREIGN KEY (FUNC_ID) REFERENCES FUNCS (FUNC_ID) ;

CREATE INDEX FUNC_RU_N49 ON FUNC_RU (FUNC_ID);


-- Constraints for table SKEWED_COL_VALUE_LOC_MAP
ALTER TABLE SKEWED_COL_VALUE_LOC_MAP ADD CONSTRAINT SKEWED_COL_VALUE_LOC_MAP_FK1 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

ALTER TABLE SKEWED_COL_VALUE_LOC_MAP ADD CONSTRAINT SKEWED_COL_VALUE_LOC_MAP_FK2 FOREIGN KEY (STRING_LIST_ID_KID) REFERENCES SKEWED_STRING_LIST (STRING_LIST_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: SKEWED_COL_VALUE_LOC_MAP Constraints
--CREATE INDEX SKEWED_COL_VALUE_LOC_MAP_N49 ON SKEWED_COL_VALUE_LOC_MAP (STRING_LIST_ID_KID);
--
--CREATE INDEX SKEWED_COL_VALUE_LOC_MAP_N50 ON SKEWED_COL_VALUE_LOC_MAP (SD_ID);
-- NOTE: MANUAL REMOVAL: END: SKEWED_COL_VALUE_LOC_MAP Constraints


-- Constraints for table SERDE_PARAMS
ALTER TABLE SERDE_PARAMS ADD CONSTRAINT SERDE_PARAMS_FK1 FOREIGN KEY (SERDE_ID) REFERENCES SERDES (SERDE_ID) ;

CREATE INDEX SERDE_PARAMS_N49 ON SERDE_PARAMS (SERDE_ID);


-- Constraints for table COLUMNS_V2
ALTER TABLE COLUMNS_V2 ADD CONSTRAINT COLUMNS_V2_FK1 FOREIGN KEY (CD_ID) REFERENCES CDS (CD_ID) ;

CREATE INDEX COLUMNS_V2_N49 ON COLUMNS_V2 (CD_ID);


-- Constraints for table TABLE_PARAMS
ALTER TABLE TABLE_PARAMS ADD CONSTRAINT TABLE_PARAMS_FK1 FOREIGN KEY (TBL_ID) REFERENCES TBLS (TBL_ID) ;

CREATE INDEX TABLE_PARAMS_N49 ON TABLE_PARAMS (TBL_ID);


-- Constraints for table INDEX_PARAMS
ALTER TABLE INDEX_PARAMS ADD CONSTRAINT INDEX_PARAMS_FK1 FOREIGN KEY (INDEX_ID) REFERENCES IDXS (INDEX_ID) ;

CREATE INDEX INDEX_PARAMS_N49 ON INDEX_PARAMS (INDEX_ID);


-- Constraints for table PARTITION_KEY_VALS
ALTER TABLE PARTITION_KEY_VALS ADD CONSTRAINT PARTITION_KEY_VALS_FK1 FOREIGN KEY (PART_ID) REFERENCES PARTITIONS (PART_ID) ;

CREATE INDEX PARTITION_KEY_VALS_N49 ON PARTITION_KEY_VALS (PART_ID);


-- Constraints for table SKEWED_STRING_LIST_VALUES
ALTER TABLE SKEWED_STRING_LIST_VALUES ADD CONSTRAINT SKEWED_STRING_LIST_VALUES_FK1 FOREIGN KEY (STRING_LIST_ID) REFERENCES SKEWED_STRING_LIST (STRING_LIST_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: SKEWED_STRING_LIST_VALUES Constraints
--CREATE INDEX SKEWED_STRING_LIST_VALUES_N49 ON SKEWED_STRING_LIST_VALUES (STRING_LIST_ID);
-- NOTE: MANUAL REMOVAL: END: SKEWED_STRING_LIST_VALUES Constraints


-- Constraints for table TYPE_FIELDS
ALTER TABLE TYPE_FIELDS ADD CONSTRAINT TYPE_FIELDS_FK1 FOREIGN KEY (TYPE_NAME) REFERENCES TYPES (TYPES_ID) ;

CREATE INDEX TYPE_FIELDS_N49 ON TYPE_FIELDS (TYPE_NAME);


-- Constraints for table SORT_COLS
ALTER TABLE SORT_COLS ADD CONSTRAINT SORT_COLS_FK1 FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

CREATE INDEX SORT_COLS_N49 ON SORT_COLS (SD_ID);


-- Constraints for table SKEWED_COL_NAMES
ALTER TABLE SKEWED_COL_NAMES ADD CONSTRAINT SKEWED_COL_NAMES FOREIGN KEY (SD_ID) REFERENCES SDS (SD_ID) ;

-- NOTE: MANUAL REMOVAL: BEGIN: SKEWED_COL_NAMES Constraints
--CREATE INDEX SKEWED_COL_NAMES_N49 ON SKEWED_COL_NAMES (SD_ID);
-- NOTE: MANUAL REMOVAL: END: SKEWED_COL_NAMES Constraints



-- NOTE: MANUAL ADDITION: BEGIN: Transaction & Lock Tables
-- -----------------------------------------------------------------------------------------------------------------------------------------------
-- Transaction and Lock Tables
-- These are not part of package jdo, so if you are going to regenerate this file you need to manually add the following section back to the file.
-- -----------------------------------------------------------------------------------------------------------------------------------------------
create table TXNS(
  TXN_ID decimal(19, 0) not null,
  TXN_STATE char(1) not null,
  TXN_STARTED decimal(19, 0) not null,
  TXN_LAST_HEARTBEAT decimal(19, 0) not null,
  TXN_USER varchar(128) not null,
  TXN_HOST varchar(128) not null,
  TXN_AGENT_INFO varchar(128) null,
  TXN_META_INFO varchar(128) null,
  TXN_HEARTBEAT_COUNT decimal(10, 0) null,
  TXN_TYPE decimal(10, 0) null,
  primary key (TXN_ID)
);
create table TXN_COMPONENTS(
  TC_TXNID decimal(19, 0) not null,
  TC_DATABASE varchar(128) not null,
  TC_TABLE varchar(128) null,
  TC_PARTITION varchar(767) null,
  TC_OPERATION_TYPE char(1) not null,
  TC_WRITEID decimal(19, 0) null,
  foreign key (TC_TXNID)
  references TXNS (TXN_ID)
);
create index TC_TXNID_INDEX on TXN_COMPONENTS(TC_TXNID);
create table COMPLETED_TXN_COMPONENTS(
  CTC_TIMESTAMP timestamp not null default current_timestamp,
  CTC_TXNID decimal(19, 0) not null,
  CTC_DATABASE varchar(128) not null,
  CTC_TABLE varchar(256) null,
  CTC_PARTITION varchar(767) null,
  CTC_WRITEID decimal(19, 0) null,
  CTC_UPDATE_DELETE char(1) not null
);
create index COMPLETED_TXN_COMPONENTS_INDEX on COMPLETED_TXN_COMPONENTS(
  CTC_DATABASE, 
  CTC_TABLE, 
  CTC_PARTITION
);
create table NEXT_TXN_ID(
  NTXN_NEXT decimal(19, 0) not null
);
insert into NEXT_TXN_ID
values (1);
create table HIVE_LOCKS(
  HL_LOCK_EXT_ID decimal(19, 0) not null,
  HL_LOCK_INT_ID decimal(19, 0) not null,
  HL_TXNID decimal(19, 0) not null,
  HL_DB varchar(128) not null,
  HL_TABLE varchar(128) null,
  HL_PARTITION varchar(767) null,
  HL_LOCK_STATE char(1) not null,
  HL_LOCK_TYPE char(1) not null,
  HL_LAST_HEARTBEAT decimal(19, 0) not null,
  HL_ACQUIRED_AT decimal(19, 0) null,
  HL_USER varchar(128) not null,
  HL_HOST varchar(128) not null,
  HL_HEARTBEAT_COUNT decimal(10, 0) null,
  HL_AGENT_INFO varchar(128) null,
  HL_BLOCKEDBY_EXT_ID decimal(19, 0) null,
  HL_BLOCKEDBY_INT_ID decimal(19, 0) null,
  primary key (
    HL_LOCK_EXT_ID, 
    HL_LOCK_INT_ID
  )
);
create index HL_TXNID_INDEX on HIVE_LOCKS(HL_TXNID);
create table NEXT_LOCK_ID(
  NL_NEXT decimal(19, 0) not null
);
insert into NEXT_LOCK_ID
values (1);
create table COMPACTION_QUEUE(
  CQ_ID decimal(19, 0) not null,
  CQ_DATABASE varchar(128) not null,
  CQ_TABLE varchar(128) not null,
  CQ_PARTITION varchar(767) null,
  CQ_STATE char(1) not null,
  CQ_TYPE char(1) not null,
  CQ_TBLPROPERTIES varchar(2048) null,
  CQ_WORKER_ID varchar(128) null,
  CQ_START decimal(19, 0) null,
  CQ_RUN_AS varchar(128) null,
  CQ_HIGHEST_WRITE_ID decimal(19, 0) null,
  CQ_META_INFO blob null,
  CQ_HADOOP_JOB_ID varchar(32) null,
  primary key (CQ_ID)
);
create table NEXT_COMPACTION_QUEUE_ID(
  NCQ_NEXT decimal(19, 0) not null
);
insert into NEXT_COMPACTION_QUEUE_ID
values (1);
create table COMPLETED_COMPACTIONS(
  CC_ID decimal(19, 0) not null,
  CC_DATABASE varchar(128) not null,
  CC_TABLE varchar(128) not null,
  CC_PARTITION varchar(767) null,
  CC_STATE char(1) not null,
  CC_TYPE char(1) not null,
  CC_TBLPROPERTIES varchar(2048) null,
  CC_WORKER_ID varchar(128) null,
  CC_START decimal(19, 0) null,
  CC_END decimal(19, 0) null,
  CC_RUN_AS varchar(128) null,
  CC_HIGHEST_WRITE_ID decimal(19, 0) null,
  CC_META_INFO blob null,
  CC_HADOOP_JOB_ID varchar(32) null,
  primary key (CC_ID)
);
create table AUX_TABLE(
  MT_KEY1 varchar(128) not null,
  MT_KEY2 decimal(19, 0) not null,
  MT_COMMENT varchar(255) null,
  primary key (
    MT_KEY1, 
    MT_KEY2
  )
);
create table WRITE_SET(
  WS_DATABASE varchar(128) not null,
  WS_TABLE varchar(128) not null,
  WS_PARTITION varchar(767) null,
  WS_TXNID decimal(19, 0) not null,
  WS_COMMIT_ID decimal(19, 0) not null,
  WS_OPERATION_TYPE char(1) not null
);
create table TXN_TO_WRITE_ID(
  T2W_TXNID decimal(19, 0) not null,
  T2W_DATABASE varchar(128) not null,
  T2W_TABLE varchar(256) not null,
  T2W_WRITEID decimal(19, 0) not null
);
create unique index TBL_TO_TXN_ID_IDX on TXN_TO_WRITE_ID(
  T2W_DATABASE, 
  T2W_TABLE, 
  T2W_TXNID
);
create unique index TBL_TO_WRITE_ID_IDX on TXN_TO_WRITE_ID(
  T2W_DATABASE, 
  T2W_TABLE, 
  T2W_WRITEID
);
create table NEXT_WRITE_ID(
  NWI_DATABASE varchar(128) not null,
  NWI_TABLE varchar(256) not null,
  NWI_NEXT decimal(19, 0) not null
);
create unique index NEXT_WRITE_ID_IDX on NEXT_WRITE_ID(
  NWI_DATABASE, 
  NWI_TABLE
);
create table MIN_HISTORY_LEVEL(
  MHL_TXNID decimal(19, 0) not null,
  MHL_MIN_OPEN_TXNID decimal(19, 0) not null,
  primary key (MHL_TXNID)
);
create index MIN_HISTORY_LEVEL_IDX on MIN_HISTORY_LEVEL(MHL_MIN_OPEN_TXNID);
create table MATERIALIZATION_REBUILD_LOCKS(
  MRL_TXN_ID decimal not null,
  MRL_DB_NAME varchar(128) not null,
  MRL_TBL_NAME varchar(256) not null,
  MRL_LAST_HEARTBEAT decimal not null,
  primary key (MRL_TXN_ID)
);
create table REPL_TXN_MAP(
  RTM_REPL_POLICY varchar(256) not null,
  RTM_SRC_TXN_ID decimal(19, 0) not null,
  RTM_TARGET_TXN_ID decimal(19, 0) not null,
  primary key (
    RTM_REPL_POLICY, 
    RTM_SRC_TXN_ID
  )
);
create table TXN_WRITE_NOTIFICATION_LOG(
  WNL_ID decimal(19, 0) not null,
  WNL_TXNID decimal(19, 0) not null,
  WNL_WRITEID decimal(19, 0) not null,
  WNL_DATABASE varchar(128) not null,
  WNL_TABLE varchar(128) not null,
  WNL_PARTITION varchar(767) null,
  WNL_TABLE_OBJ clob not null,
  WNL_PARTITION_OBJ clob null,
  WNL_FILES clob null,
  WNL_EVENT_TIME decimal(10, 0) not null
);
create index TXN_WRITE_NOTIFICATION_LOG_IDX on TXN_WRITE_NOTIFICATION_LOG(
  WNL_TXNID, 
  WNL_DATABASE, 
  WNL_TABLE, 
  WNL_PARTITION
);
insert into SEQUENCE_TABLE (
  SEQUENCE_NAME, 
  NEXT_VAL
)
values (
  'org.apache.hadoop.hive.metastore.model.MTxnWriteNotificationLog', 
  1
);
-- NOTE: MANUAL ADDITION: END: Transaction & Lock Tables

-- NOTE: MANUAL ADDITION: BEGIN: Record Schema Version
-- -----------------------------------------------------------------
-- Record schema version. Should be the last step in the init script
-- -----------------------------------------------------------------
INSERT INTO VERSION (VER_ID, SCHEMA_VERSION, VERSION_COMMENT) VALUES (1, '3.1.0', 'Hive release version 3.1.0');
-- NOTE: MANUAL ADDITION: END: Record Schema Version
